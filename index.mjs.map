{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert-is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted mean.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwmean( 0.5 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( -5.0 );\n* // returns -1.5\n*\n* v = accumulator();\n* // returns -1.5\n*/\nfunction increwmean( alpha ) {\n\tvar m;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative number. Value: `%s`.', alpha ) );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `%f`.', alpha ) );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( m === void 0 ) ? null : m;\n\t\t}\n\t\tif ( m === void 0 ) {\n\t\t\tm = x;\n\t\t} else {\n\t\t\tm += alpha * ( x-m );\n\t\t}\n\t\treturn m;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = increwmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted mean incrementally.\n*\n* @module @stdlib/stats-incr-ewmean\n*\n* @example\n* var increwmean = require( '@stdlib/stats-incr-ewmean' );\n*\n* var accumulator = increwmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( -5.0 );\n* // returns -1.5\n*\n* v = accumulator();\n* // returns -1.5\n*/\n\n// MODULES //\n\nvar increwmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = increwmean;\n"],"names":["isNonNegativeNumber","require$$0","isPrimitive","format","require$$1","lib","alpha","m","TypeError","RangeError","x","arguments","length"],"mappings":";;iLAsBA,IAAIA,EAAsBC,EAAkDC,YACxEC,EAASC,EA6Db,IClCAC,EDCA,SAAqBC,GACpB,IAAIC,EACJ,IAAMP,EAAqBM,GAC1B,MAAM,IAAIE,UAAWL,EAAQ,oEAAqEG,IAEnG,GAAKA,EAAQ,GAAOA,EAAQ,EAC3B,MAAM,IAAIG,WAAYN,EAAQ,0FAA2FG,IAE1H,OASA,SAAsBI,GACrB,GAA0B,IAArBC,UAAUC,OACd,YAAe,IAANL,EAAiB,KAAOA,OAEvB,IAANA,EACJA,EAAIG,EAEJH,GAAKD,GAAUI,EAAEH,GAElB,OAAOA"}